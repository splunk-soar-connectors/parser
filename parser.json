{
    "appid": "4004f489-1826-44a1-af12-9c74eea82eb0",
    "name": "Parser",
    "description": "This app extracts IOCs from various files such as PDFs, emails, or raw text",
    "type": "information",
    "product_vendor": "Splunk",
    "logo": "logo_splunk.svg",
    "logo_dark": "logo_splunk_dark.svg",
    "product_name": "Parser",
    "product_version_regex": ".*",
    "publisher": "Splunk",
    "license": "Copyright (c) 2017-2020 Splunk Inc.",
    "app_version": "2.0.2",
    "utctime_updated": "2020-03-18T23:24:33.000000Z",
    "package_name": "phantom_parser",
    "main_module": "parser_connector.py",
    "min_phantom_version": "4.6.19142",
    "python_version": "3",
    "latest_tested_versions": [
        "Phantom 4.8 on 6/11/2020"
    ],
    "app_wizard_version": "1.0.0",
    "pip_dependencies": {
        "wheel": [
            {
                "module": "pdfminer",
                "input_file": "wheels/pdfminer-20140328-py2-none-any.whl"
            }
        ]
    },
    "pip3_dependencies": {
        "wheel": [
            {
                "module": "pdfminer",
                "input_file": "wheels/pdfminer-20191125.tar.gz"
            }
        ]
    },
    "configuration": {},
    "actions": [
        {
            "action": "extract ioc",
            "identifier": "parse_file",
            "description": "Create IOC artifacts from a file in the vault or raw text",
            "verbose": "Specify either text or vault_id. If text is used only file_types of csv, html, and txt can be selected. <br/><br/>If vault_id is used and the [file_type] is left blank, the app will try to determine what type of file it is on its own. <br/><br/> When parsing an email file (.eml), the <b>file_type</b> parameter must be set to <b>email</b>. <br/> <br/> <b>Label</b> or <b>Container ID</b> is mandatory to run an action. It will display an error message if both of them are not mentioned. <br/> <br/> <b> Caveats:</b> <ul><li>If the [file_type] you chose related to [vault_id] is incorrect, you will have an unexpected output scenario.</li><li>For email filetype, if the file has attachments with a filename over 200 characters, it will ignore those files and will not create any Vault artifact for that.</li></ul>",
            "type": "generic",
            "read_only": true,
            "parameters": {
                "vault_id": {
                    "description": "Vault ID",
                    "data_type": "string",
                    "required": false,
                    "primary": true,
                    "contains": [
                        "vault id"
                    ],
                    "order": 0
                },
                "file_type": {
                    "description": "Type of the file",
                    "data_type": "string",
                    "required": false,
                    "value_list": [
                        "txt",
                        "email",
                        "pdf",
                        "docx",
                        "csv",
                        "html"
                    ],
                    "order": 1
                },
                "text": {
                    "description": "Raw text from which to extract IOCs",
                    "data_type": "string",
                    "order": 2
                },
                "is_structured": {
                    "description": "Use first row of CSV file as field names",
                    "data_type": "boolean",
                    "default": false,
                    "order": 3
                },
                "label": {
                    "description": "Add container to this label",
                    "data_type": "string",
                    "required": false,
                    "order": 4
                },
                "max_artifacts": {
                    "description": "Maximum number of artifacts (not applicable to .eml filetype)",
                    "data_type": "numeric",
                    "required": false,
                    "order": 5
                },
                "container_id": {
                    "description": "Add created artifacts to this container",
                    "data_type": "numeric",
                    "required": false,
                    "order": 6
                },
                "remap_cef_fields": {
                    "description": "Remap the CEF fields with new field names; Optionally, also apply an internal CEF -> CIM field name mapping. Note: (source|destination)Address will be mapped to (src|dest)_ip respectively instead of src|dest (not applicable to .eml filetype)",
                    "data_type": "string",
                    "required": false,
                    "default": "Do not apply CEF -> CIM remapping, only apply custom remap",
                    "value_list": [
                        "Do not apply CEF -> CIM remapping, only apply custom remap",
                        "Apply CEF -> CIM remapping before applying custom remap",
                        "Apply custom remap and apply CEF -> CIM remapping after"
                    ],
                    "order": 7
                },
                "custom_remap_json": {
                    "description": "Custom set of CEF field name mappings. This is a serialized json dictionary (json.dumps) of Key/Value pairs where Key is an existing field name and Value is the resultant name (not applicable to .eml filetype)",
                    "data_type": "string",
                    "default": "{}",
                    "required": false,
                    "order": 8
                },
                "run_automation": {
                    "description": "Enable run_automation for newly created artifacts",
                    "data_type": "boolean",
                    "default": true,
                    "required": false,
                    "order": 9
                },
                "severity": {
                    "required": false,
                    "description": "Severity for the newly created artifacts",
                    "data_type": "string",
                    "default": "medium",
                    "order": 10
                },
                "parse_domains": {
                    "required": false,
                    "description": "Parse domains from artifacts",
                    "data_type": "boolean",
                    "default": true,
                    "order": 11
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "numeric",
                    "example_values": [
                        1776
                    ]
                },
                {
                    "data_path": "action_result.parameter.file_type",
                    "data_type": "string",
                    "example_values": [
                        "txt",
                        "email",
                        "pdf",
                        "docx",
                        "csv",
                        "html"
                    ]
                },
                {
                    "data_path": "action_result.parameter.is_structured",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.label",
                    "data_type": "string",
                    "example_values": [
                        "Events"
                    ]
                },
                {
                    "data_path": "action_result.parameter.max_artifacts",
                    "data_type": "numeric",
                    "example_values": [
                        100
                    ]
                },
                {
                    "data_path": "action_result.parameter.run_automation",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.severity",
                    "data_type": "string",
                    "example_values": [
                        "low"
                    ]
                },
                {
                    "data_path": "action_result.parameter.text",
                    "data_type": "string",
                    "example_values": [
                        "Test string to extract IOCs from"
                    ]
                },
                {
                    "data_path": "action_result.parameter.vault_id",
                    "data_type": "string",
                    "example_values": [
                        "3d6ef06ab51be5a86cdfaba246db2c2ab1d07795"
                    ],
                    "contains": [
                        "vault id"
                    ]
                },
                {
                    "data_path": "action_result.parameter.remap_cef_fields",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.custom_remap_json",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.artifacts_found",
                    "data_type": "numeric",
                    "example_values": [
                        13
                    ]
                },
                {
                    "data_path": "action_result.summary.container_id",
                    "data_type": "numeric",
                    "example_values": [
                        1776
                    ],
                    "column_order": 0,
                    "column_name": "Container ID"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Container id: 52069, Artifacts found: 27"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        2
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "render": {
                "width": 12,
                "title": "Parse File",
                "type": "table",
                "height": 5
            },
            "versions": "EQ(*)"
        }
    ]
}